" Vundle config

set nocompatible              " be iMproved, required
"filetype off                  " required

set selection=exclusive
set selectmode=mouse,key
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
"set grepprg=ag\ --nocolor\ --nogroup\ --column\ --vimgrep
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

let ctrlp_cmds = ['<plug>(ctrlp', 'CtrlP',
  \ 'CtrlPMixed', 'CtrlPBuffer',
  \ 'CtrlPLine', 'CtrlPUndo',
  \ 'CtrlPChange', 'CtrlPQuickfix',
  \ 'CtrlPMRU', 'CtrlPFunky',
  \ 'CtrlPCurWD']
" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'

"From here other plugins from the original Vundle config
Plugin 'scrooloose/nerdtree'        
Plugin 'groenewege/vim-less'
Plugin 'airblade/vim-gitgutter'

"Other Plugins 
"""""""""""""""""""""""""""""
Plugin 'tpope/vim-surround'
"Plugin 'python-mode/python-mode'
Plugin 'vim-scripts/ctrlp.vim', { 'on': ctrlp_cmds }
Plugin 'tacahiroy/ctrlp-funky', { 'on': ctrlp_cmds }
Plugin 'vim-scripts/supertab'
Plugin 'majutsushi/tagbar'
"Plugin 'lervag/vimtex'
Plugin 'jvirtanen/vim-octave'
"Plugin 'xuhdev/vim-latex-live-preview'
Plugin 'JuliaEditorSupport/julia-vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"Plugin of color schemes
Plugin 'morhetz/gruvbox'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'noahfrederick/vim-hemisu'
Plugin 'veloce/vim-aldmeris'
Plugin 'tomasr/molokai'
"SnipMate plugins
""""""""""""""""""""""""""""""""""""
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'garbas/vim-snipmate'
" Optional:
Plugin 'honza/vim-snippets'
"""""""""""""""""""""""""""""""""""
Plugin 'inkarkat/vim-ingo-library'
Plugin 'inkarkat/vim-mark'
Plugin 'kshenoy/vim-signature'
Plugin 'dkprice/vim-easygrep', { 'on': ['<plug>EgMap', 'Grep', 'Replace'] }
Plugin 'easymotion/vim-easymotion', { 'on': '<Plug>(easymotion' }
Plugin 'Yggdroot/LeaderF'
Plugin 'xolox/vim-session'
Plugin 'xolox/vim-misc'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" End of Vundle config

" General
set number  " Show line numbers
set linebreak " Break lines at word (requires Wrap lines)
set showbreak=+++ " Wrap-broken line prefix
set textwidth=100 " Line wrap (number of cols)
set showmatch " Highlight matching brace
set visualbell  " Use visual bell (no beeping)
 
set hlsearch  " Highlight all search results
set smartcase " Enable smart-case search
set ignorecase  " Always case-insensitive
set incsearch " Searches for strings incrementally
 
set autoindent  " Auto-indent new lines
set expandtab " Use spaces instead of tabs
set shiftwidth=2  " Number of auto-indent spaces
set smartindent " Enable smart-indent
set smarttab  " Enable smart-tabs
set softtabstop=2 " Number of spaces per Tab
 
" Advanced
set ruler " Show row and column ruler information
 
set undolevels=1000 " Number of undo levels
set backspace=indent,eol,start  " Backspace behaviour
 
 
" Generated by VimConfig.com
set mouse=a " activate mouse
set scrolloff=10
set softtabstop=4
set wrap

" Autoload NERDTree if no file specified
autocmd StdinReadPre * let s:std_in=1
"autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif | wincmd p
" Auto close NERDTree if no more files
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif
let NERDTreeWinPos=1
" Show hidden files in NERDTree
let NERDTreeShowHidden=1

" enable copy to clipboard
"set clipboard+=unnamed
set clipboard^=unnamed,unnamedplus

" copy to clipboard with Ctrl-C
"map <C-x> :!pbcopy<cr>
"vmap <C-c> :w !pbcopy<cr><cr>
"
"" paste from clipboard with Ctrl-V
"set pastetoggle=<F10>
"inoremap <C-v> <F10><C-r>+<F10>
" pdf
"autocmd Filetype tex setl updatetime=1
"let g:livepreview_previewer = 'evince'
"let g:livepreview_previewer = 'open -a Skim'

"""""""""""""""""""""""""""
" Git-gutter configuration
"""""""""""""""""""""""""""

let g:gitgutter_updatetime = 750
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1

"""""""""""""""""""""""""""
" Custom (no plugin related)
"""""""""""""""""""""""""""

" show filename
set statusline+=%F

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable 
syntax on 
let mapleader = ","
let g:mapleader = ","
" Tell vim to use colors which look good on a dark/light background
set t_Co=256
nnoremap <silent> <Leader>bg :call ToggleBackground()<cr>
function! ToggleBackground()
    if &background == "light"
        set background=dark
                " Color scheme
        try
        colorscheme gruvbox
        catch
        endtry
    else
        set background=light
         " Color scheme
        try
        colorscheme PaperColor
        catch
        endtry

    endif
endfunction
        set background=dark
         " Color scheme
        try
        colorscheme gruvbox
        catch
        endtry
        " For MacVim
        set guifont=Monaco:h16
" Highlight current cursor line, <leader>c to toggle on and off
set cursorline
hi CursorLine term=bold ctermfg=214 ctermbg=237 guifg=#fabd2f guibg=#3c3836
nnoremap <leader>c :set cursorline!<cr>

" Fast saving and quit
"nnoremap <leader>w :w<cr>
"nnoremap <leader>q :q<cr>

" Close the current buffer
map <leader>bd :bd<cr>
" Cycle through listed buffers
map <leader>bn :bn<cr>
map <leader>bp :bp<cr>

" Close all the buffers
map <leader>ba :1,1000 bd!<cr>

" Useful mappings for managing tabs
map <leader>tn :tabnew<cr>
map <leader>to :tabonly<cr>
map <leader>tc :tabclose<cr>
map <leader>tt :tabnext<cr>
map <leader>tp :tabp<CR>


" Opens a new tab with the current buffer's path
" Super useful when editing files in the same directory
map <leader>te :tabedit <c-r>=expand("%:p:h")<cr>/


" Set utf8 as standard encoding and en_US as the standard language
set encoding=utf8

" Use Unix as the standard file type
set ffs=unix,dos,mac

"---------------------------------------------------------------
" LATEX LIVE PREVIEWER
" --------------------------------------------------------------
autocmd Filetype tex setl updatetime=1
let g:livepreview_previewer = 'open -a Preview'
set nofoldenable

"-------------------------------------------------------------
" AIRLINE
" ------------------------------------------------------------
" enable powerline fonts
let g:airline_powerline_fonts = 1
" enable tabline
let g:airline#extensions#tabline#enabled = 1

"  airline symbols dictionary
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols, for multiple definitions choose one
"let g:airline_left_sep = '¬ª'
let g:airline_left_sep = '‚ñ∂'
"let g:airline_right_sep = '¬´'
let g:airline_right_sep = '‚óÄ'
let g:airline_symbols.crypt = 'üîí'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.linenr = '‚êä'
let g:airline_symbols.linenr = '‚≠°'
"let g:airline_symbols.linenr = '¬∂'
let g:airline_symbols.maxlinenr = ''
"let g:airline_symbols.maxlinenr = '„èë'
let g:airline_symbols.branch = '‚éá'
let g:airline_symbols.paste = 'œÅ'
"let g:airline_symbols.paste = '√û'
"let g:airline_symbols.paste = '‚à•'
let g:airline_symbols.spell = 'Íû®'
let g:airline_symbols.notexists = '…Ü'
let g:airline_symbols.whitespace = 'Œû'
" powerline symbols, needed if powerline fonts are installed
"let g:airline_left_sep = 'ÓÇ∞'
"let g:airline_left_alt_sep = 'ÓÇ±'
"let g:airline_right_sep = 'ÓÇ≤'
"let g:airline_right_alt_sep = 'ÓÇ≥'
"let g:airline_symbols.branch = 'ÓÇ†'
"let g:airline_symbols.readonly = 'ÓÇ¢'
"let g:airline_symbols.linenr = '‚ò∞'
"let g:airline_symbols.maxlinenr = 'ÓÇ°'
"
"-------------------------------------------------------------
" Ctags
" ------------------------------------------------------------

if has("cscope") && filereadable("/usr/bin/cscope")
   set csprg=/usr/bin/cscope
   set csto=0
   set cst
   set nocsverb
   " add any database in current directory
   if filereadable("cscope.out")
      cs add cscope.out
   " else add database pointed to by environment
   elseif $CSCOPE_DB != ""
      cs add $CSCOPE_DB
   endif
   set csverb
  nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
  " Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
  " makes the vim window split horizontally, with search result displayed in
  " the new window.
  "
  " (Note: earlier versions of vim may not have the :scs command, but it
  " can be simulated roughly via:
  "  nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

  " Hitting CTRL-space *twice* before the search type does a vertical 
  " split instead of a horizontal one (vim 6 and up only)
  "
  " (Note: you may wish to put a 'set splitright' in your .vimrc
  " if you prefer the new window on the right instead of the left
  nmap <C-@><C-@>s :vert scs find s <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>g :vert scs find g <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>c :vert scs find c <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>t :vert scs find t <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>e :vert scs find e <C-R>=expand("<cword>")<CR><CR>
  nmap <C-@><C-@>f :vert scs find f <C-R>=expand("<cfile>")<CR><CR>
  nmap <C-@><C-@>i :vert scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
  nmap <C-@><C-@>d :vert scs find d <C-R>=expand("<cword>")<CR><CR>
endif

" EasyMotion
let g:EasyMotion_do_mapping = 0
let g:EasyMotion_smartcase = 1
let g:EasyMotion_startofline = 0 " keep cursor colum when JK motion
let g:EasyMotion_use_upper = 1
let g:EasyMotion_keys = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ;'
nmap f <Plug>(easymotion-f)
nmap F <Plug>(easymotion-F)
nmap t <Plug>(easymotion-t)
nmap T <Plug>(easymotion-T)
nmap ? <Plug>(easymotion-repeat)
nmap / <Plug>(easymotion-sn)
nmap n <Plug>(easymotion-next)
nmap N <Plug>(easymotion-prev)

nmap <Leader><leader>l <Plug>(easymotion-W)
nmap <Leader><leader>j <Plug>(easymotion-j)
nmap <Leader><leader>k <Plug>(easymotion-k)
nmap <Leader><leader>h <Plug>(easymotion-B)
" ÈáçÂ§ç‰∏ä‰∏ÄÊ¨°Êìç‰Ωú, Á±ª‰ººrepeatÊèí‰ª∂, ÂæàÂº∫Â§ß
nmap <Leader><leader>. <Plug>(easymotion-repeat)

" ctrlp
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
let g:ctrlp_use_caching = 0
let g:ctrlp_tilde_homedir = 1
nmap <Leader>p :CtrlP<CR>
nmap <Leader>pr :CtrlPMRU<CR>
nmap <Leader>pm :CtrlPMixed<CR>
nmap <Leader>pb :CtrlPBuffer<CR>
nmap <Leader>pl :CtrlPLine<CR>
nmap <Leader>pu :CtrlPUndo<CR>
nmap <Leader>pc :CtrlPChange<CR>
nmap <Leader>pq :CtrlPQuickfix<CR>
nmap <Leader>pw :CtrlPCurWD<CR>
nmap <Leader>fu :CtrlPFunky<CR>
nmap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<CR>
nmap <Space> <plug>(ctrlp)
let g:ctrlp_funky_matchtype = 'path'
let g:ctrlp_funky_syntax_highlight = 1
let g:ctrlp_extensions = ['mixed', 'line', 'funky', 'undo', 'changes']
let g:ctrlp_match_window = 'results:50'
" vim-jsdoc
let g:jsdoc_allow_input_prompt = 1
let g:jsdoc_enable_es6 = 1
let g:jsdoc_lehre_path = '/usr/local/bin/lehre'
let g:jsdoc_formatter = 'tsdoc'

" vim-mark
"let g:mwDefaultHighlightingPalette = 'maximum'
"nmap m <Plug>MarkSearchOrCurNext
"nmap M <Plug>MarkSearchOrCurPrev
nmap <Leader>mc :nohl<CR><Plug>MarkAllClear

" vim-fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gd :Gdiff<CR>
nnoremap <Leader>gc :Gcommit -m""
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gl :Glog
nnoremap <Leader>gp :Gpush<CR>
nnoremap <Leader>gpp :Gpull<CR>

" vim-gitgutter
let g:gitgutter_override_sign_column_highlight = 0
"let g:gitgutter_max_signs = 1000
" easygrep
let g:EasyGrepCommand = 1
let g:EasyGrepRecursive = 1
let g:EasyGrepJumpToMatch = 0
let g:EasyGrepReplaceWindowMode = 2
let g:EasyGrepWindowPosition = 'botright'
let g:EasyGrepRoot = 'search:.git,.svn,.hg'
nmap <leader>vc :Grep 
map <silent> <leader>vo <plug>EgMapGrepOptions
map <silent> <leader>vv <plug>EgMapGrepCurrentWord_v
vmap <silent> <leader>vv <plug>EgMapGrepSelection_v
map <silent> <leader>va <plug>EgMapGrepCurrentWord_a
vmap <silent> <leader>va <plug>EgMapGrepSelection_a
map <silent> <leader>vr <plug>EgMapReplaceCurrentWord_r
vmap <silent> <leader>vr <plug>EgMapReplaceSelection_r
" Tagbar
let g:tagbar_left = 1
let g:tagbar_width = 35
let g:tagbar_iconchars = ['+', '-']
let g:tagbar_autoshowtag = 1
let g:tagbar_type_typescript = {
  \ 'ctagsbin' : 'tstags',
  \ 'ctagsargs' : '-f-',
  \ 'kinds': [
    \ 'e:enums:0:1',
    \ 'f:function:0:1',
    \ 't:typealias:0:1',
    \ 'M:Module:0:1',
    \ 'I:import:0:1',
    \ 'i:interface:0:1',
    \ 'C:class:0:1',
    \ 'm:method:0:1',
    \ 'p:property:0:1',
    \ 'v:variable:0:1',
    \ 'c:const:0:1',
  \ ],
  \ 'sort' : 0
\ }

" maps for Tagbar and Ctags
nmap <Leader>tb :TagbarToggle<CR>
let g:tagbar_ctags_bin='/usr/bin/ctags'  " ËÆæÁΩÆctagsÊâÄÂú®Ë∑ØÂæÑ
autocmd BufReadPost *.cpp,*.c,*.h,*.hpp,*.cc,*.cxx call tagbar#autoopen() " Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãËá™Âä®ÊâìÂºÄtagbar
nnoremap <C-n> :NERDTreeToggle<cr>
nnoremap <C-e> :edit.<cr>

" leaderF don't show the help in normal mode
let g:Lf_HideHelp = 1
let g:Lf_UseCache = 0
let g:Lf_UseVersionControlTool = 0
let g:Lf_IgnoreCurrentBufferName = 1
" popup mode
let g:Lf_WindowPosition = 'popup'
let g:Lf_PreviewInPopup = 1
let g:Lf_StlSeparator = { 'left': "\ue0b0", 'right': "\ue0b2", 'font': "DejaVu Sans Mono for Powerline" }
let g:Lf_PreviewResult = {'Function': 0, 'BufTag': 0 }

let g:Lf_ShortcutF = "<leader>ff"
noremap <leader>fb :<C-U><C-R>=printf("Leaderf buffer %s", "")<CR><CR>
noremap <leader>fm :<C-U><C-R>=printf("Leaderf mru %s", "")<CR><CR>
noremap <leader>ft :<C-U><C-R>=printf("Leaderf bufTag %s", "")<CR><CR>
noremap <leader>fl :<C-U><C-R>=printf("Leaderf line %s", "")<CR><CR>

"noremap <C-B> :<C-U><C-R>=printf("Leaderf! rg --current-buffer -e %s ", expand("<cword>"))<CR>
"noremap <C-F> :<C-U><C-R>=printf("Leaderf! rg -e %s ", expand("<cword>"))<CR>
" search visually selected text literally
xnoremap gf :<C-U><C-R>=printf("Leaderf! rg -F -e %s ", leaderf#Rg#visual())<CR>
noremap go :<C-U>Leaderf! rg --recall<CR>

" should use `Leaderf gtags --update` first
let g:Lf_GtagsAutoGenerate = 0
let g:Lf_Gtagslabel = 'native-pygments'
noremap <leader>fr :<C-U><C-R>=printf("Leaderf! gtags -r %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fd :<C-U><C-R>=printf("Leaderf! gtags -d %s --auto-jump", expand("<cword>"))<CR><CR>
noremap <leader>fo :<C-U><C-R>=printf("Leaderf! gtags --recall %s", "")<CR><CR>
noremap <leader>fn :<C-U><C-R>=printf("Leaderf gtags --next %s", "")<CR><CR>
noremap <leader>fp :<C-U><C-R>=printf("Leaderf gtags --previous %s", "")<CR><CR>

"auto fold text
"autocmd FileType c,cpp  setl fdm=syntax | setl fen 
autocmd FileType c,cpp  setl fdm=indent | setl fen 

